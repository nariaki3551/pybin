#!/usr/local/bin/python3
import argparse
from sys import stdin
import subprocess as sp
from multiprocessing import Pool

import tqdm

EXAMPLE = """
ex)
    ls | pywhile rm
    ls | pywhile rm -r
    ls | pywhile "python script.py #f"
    ls | pywhile "python script.py #f" -p 2
"""


def gen_command_data(command, line):
    if '.' == command:
        command = line.strip()
    elif "#f" in command:
        command = command.replace('#f', line.strip(), -1)
    else:
        command = command + ' ' + line.strip()
    # com: str -> list
    command = command.split()
    # redirect
    if '>' in command:
        output_file = command[command.index('>') + 1]
        command = command[:command.index('>')]
    else:
        output_file = None
    return command, output_file


def run(command_data):
    command, output_file = command_data

    if not QUIET:
        if output_file is not None:
            print(' '.join(command), '>', output_file)
        else:
            print(' '.join(command))

    if output_file is not None:
        stdout = open(output_file, 'w')
    else:
        stdout = sp.STDOUT
        stdout = None

    proc = sp.Popen(command, stdout=stdout)
    proc.wait()


def main(command):
    if PROGRESS:
        iter_wrapper = tqdm.tqdm
    else:
        iter_wrapper = lambda x, *args, **kwargs: x

    if PROCESSES == 1:
        lines = list(stdin.readlines())
        for line in iter_wrapper(lines):
            run(gen_command_data(command, line))
    else:
        commands = [gen_command_data(command, line) for line in stdin.readlines()]
        with Pool(processes=PROCESSES) as pool:
            imap = pool.imap(run, commands, chunksize=CHUNKSIZE)
            list(iter_wrapper(imap, total=len(commands)))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="run command + input",
    )
    parser.add_argument(
        'command',
        help='command '\
            +'- #f is replaced to stdin;'\
            +'- if it is ., then run stdin as command'
    )
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='do not display command'
    )
    parser.add_argument(
        '-p', '--processes',
        type=int,
        default=1,
        help='process number when parallel execution'
    )
    parser.add_argument(
        '-c', '--chunksize',
        type=int,
        default=1,
        help='chunksize of imap',
    )
    parser.add_argument(
        '--progress',
        action='store_true',
        help='show progress',
    )
    args = parser.parse_args()

    PROCESSES = args.processes
    QUIET = args.quiet
    PROGRESS = args.progress
    CHUNKSIZE = args.chunksize

    main(args.command)
